// // CSS variables
//:root {
//  --primary-color: #272727;
//  --accent-color: #ff652f;
//  --text-color: #fff;
//}

//body {
//  background: var(--primary-color);
//}

//// Use scss variable has 100% compatibility with browsers because it's inputting the variable value (check the main.css file).
//// while css variable is still not 100% browser compatible.
//$primary-color: #272727;
//$accent-color: #ff652f;
//$text-color: #fff;
//// https://sass-lang.com/documentation/values/maps
//$font-weights: ("regular": 400, "medium": 500, "bold": 700);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@import "./resets";
@import "./variables";

// Function is supposed to use to compute values and return values.
@function weight($weight-name) {
  @return map-get($font-weights, $weight-name);
}

// Mixin is use for defining styles
//@mixin flexCenter {
//  display: flex;
//  justify-content: center;
//  align-items: center;
//}
@mixin flexCenter($direction) {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $direction;
}

@mixin theme($light-theme: true) {
  @if($light-theme) {
    background: lighten($primary-color, 100%);
    color: darken($text-color, 100%);
  }
}

body {
  background: $primary-color;
  color: $text-color;
}

.main {
  //@include flexCenter;
  @include flexCenter(row);
  width: 80%;
  margin: 0 auto;

  // // It also doesn't put your comment into the output css. Good result!
  //p {
  //  font-weight: map-get($font-weights, bold);
  //}

  // this output ".main .main__paragraph"
  //.main__paragraph {
  //  font-weight: map-get($font-weights, bold);
  //}

  // Better shortcut:
  // this only output ".main__paragraph"
  //&__paragraph {
  //  font-weight: map-get($font-weights, bold);
  //}

  // this only actually output what we want: ".main .main__paragraph"
  #{&}__paragraph {
    //font-weight: map-get($font-weights, bold);
    font-weight: weight(bold);

    &:hover {
      color: pink;
    }
  }
}

// When $light-theme is false, the whole if condition is not going to apply
// meaning nothing is going to be add inside .light class. The compiler will auto remove empty class
// very smart way to save space.
.light {
  @include theme($light-theme: false);
  // Or you can just type @include theme(true);
}
